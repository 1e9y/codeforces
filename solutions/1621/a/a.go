// template version: 2022-01
// generated by 1e9y at 06-01-2022

package main

import (
	"bufio"
	. "fmt"
	"os"
	"strconv"
	"strings"
)

// 1621.A
func solve(n, k int) (result string, ok bool) {
	if n < 2*k-1 {
		return
	}

	rooks := 0
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			if i == j && i%2 == 0 && j%2 == 0 && rooks < k {
				result += "R"
				rooks++
			} else {
				result += "."
			}
		}
		result += "\n"
	}

	return strings.TrimRight(result, "\n"), true
}

func main() {
	in := bufio.NewReader(os.Stdin)

	t := ReadInt(in)
	for i := 0; i < t; i++ {
		input := ReadIntSlice(in)
		n, k := input[0], input[1]
		if result, ok := solve(n, k); ok {
			Println(result)
		} else {
			Println(-1)
		}
	}
}

// helpers for convenient input reading

func ReadInt(in *bufio.Reader) int {
	line, _ := in.ReadString('\n')
	line = strings.Trim(line, "\n\r")
	n, _ := strconv.Atoi(line)
	return n
}

func ReadLineParts(in *bufio.Reader) []string {
	line, _ := in.ReadString('\n')
	line = strings.Trim(line, "\n\r")
	parts := strings.Split(line, " ")
	return parts
}

func ReadIntSlice(in *bufio.Reader) []int {
	parts := ReadLineParts(in)
	slice := make([]int, len(parts))
	for i, n := range parts {
		slice[i] = MustAtoi(n)
	}
	return slice
}

func ReadInt64Slice(in *bufio.Reader) []int64 {
	parts := ReadLineParts(in)
	slice := make([]int64, len(parts))
	for i, n := range parts {
		slice[i] = MustParseInt(n, 10, 64)
	}
	return slice
}

func ReadUint64Slice(in *bufio.Reader) []uint64 {
	parts := ReadLineParts(in)
	slice := make([]uint64, len(parts))
	for i, n := range parts {
		slice[i] = MustParseUint(n, 10, 64)
	}
	return slice
}

func MustAtoi(s string) int {
	v, _ := strconv.Atoi(s)
	return v
}

func MustParseInt(s string, base, bitSize int) int64 {
	v, _ := strconv.ParseInt(s, base, bitSize)
	return v
}

func MustParseUint(s string, base, bitSize int) uint64 {
	v, _ := strconv.ParseUint(s, base, bitSize)
	return v
}
