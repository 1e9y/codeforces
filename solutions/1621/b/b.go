// generated by 1e9y at 06-01-2022
// template version: 2022-01

package main

import (
	"bufio"
	. "fmt"
	"math"
	"os"
	"strconv"
	"strings"
)

func min(a, b uint64) uint64 {
	if a < b {
		return a
	}
	return b
}

var inf uint64 = math.MaxUint64

// 1621.B
func solve(shop [][]uint64) []uint64 {
	result := make([]uint64, len(shop))
	var lmin, rmin, lrmin uint64 = inf, inf, inf
	var l, r uint64 = 1e9 + 1, 0
	for i, s := range shop {
		if s[0] < l {
			lmin = inf
			lrmin = inf
			l = s[0]
		}
		if s[1] > r {
			rmin = inf
			lrmin = inf
			r = s[1]
		}
		if s[0] == l {
			lmin = min(lmin, s[2])
		}
		if s[1] == r {
			rmin = min(rmin, s[2])
		}
		if s[0] == l && s[1] == r {
			lrmin = min(lrmin, s[2])
		}
		result[i] = min(lmin+rmin, lrmin)
	}
	return result
}

func main() {
	in := bufio.NewReader(os.Stdin)

	t := ReadInt(in)
	for i := 0; i < t; i++ {
		n := ReadInt(in)
		shop := make([][]uint64, n)
		for j := 0; j < n; j++ {
			shop[j] = ReadUint64Slice(in)
		}
		for _, line := range solve(shop) {
			Println(line)
		}
	}
}

// helpers for convenient input reading

func ReadInt(in *bufio.Reader) int {
	line, _ := in.ReadString('\n')
	line = strings.Trim(line, "\n\r")
	n, _ := strconv.Atoi(line)
	return n
}

func ReadLineParts(in *bufio.Reader) []string {
	line, _ := in.ReadString('\n')
	line = strings.Trim(line, "\n\r")
	parts := strings.Split(line, " ")
	return parts
}

func ReadIntSlice(in *bufio.Reader) []int {
	parts := ReadLineParts(in)
	slice := make([]int, len(parts))
	for i, n := range parts {
		slice[i] = MustAtoi(n)
	}
	return slice
}

func ReadInt64Slice(in *bufio.Reader) []int64 {
	parts := ReadLineParts(in)
	slice := make([]int64, len(parts))
	for i, n := range parts {
		slice[i] = MustParseInt(n, 10, 64)
	}
	return slice
}

func ReadUint64Slice(in *bufio.Reader) []uint64 {
	parts := ReadLineParts(in)
	slice := make([]uint64, len(parts))
	for i, n := range parts {
		slice[i] = MustParseUint(n, 10, 64)
	}
	return slice
}

func MustAtoi(s string) int {
	v, _ := strconv.Atoi(s)
	return v
}

func MustParseInt(s string, base, bitSize int) int64 {
	v, _ := strconv.ParseInt(s, base, bitSize)
	return v
}

func MustParseUint(s string, base, bitSize int) uint64 {
	v, _ := strconv.ParseUint(s, base, bitSize)
	return v
}
